// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;



 // } Driver Code Ends


class Solution{
  public:
    int countSubArrayProductLessThanK(const vector<int>& arr, int n, long long k)
    {
       //this is a two pointer technique where we can product with each of the element if the product is less than k it means that we have to add the subarray count is incremented by length of the sliding window//
       //time complexcity of this approach is o(n)
       //space complexcity will be o(1)
        long long count=0;
 
    
     int i=0;
     int j=0;
    long long product=1;
     while(j<n)
     {
         product*=arr[j];
         while(i<j&&product>=k)
         {
             product/=arr[i];
             i++;
         }
         
         if(product<k)
         count+=(j-i+1);
         
         j++;
     }
        
        return count;
    }
};

// { Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, i;
        long long int k;
        cin >> n >> k;
        vector<int> arr(n);
        for (i = 0; i < n; i++) cin >> arr[i];
        Solution obj;
        cout << obj.countSubArrayProductLessThanK(arr, n, k) << endl;
    }
    return 0;
}
  // } Driver Code Ends